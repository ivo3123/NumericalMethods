'''
–ó–∞–¥–∞—á–∞ 2

–ï–¥–∏–Ω –≤—ä–∑–º–æ–∂–µ–Ω –ø–æ–¥—Ö–æ–¥ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ—Å–º—è—Ç–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ç–æ—á–∫–∞ –µ —Ç.–Ω–∞—Ä. lookup table
    (–≤–∂.https://en.wikipedia.org/wiki/Lookup_table).

–î–∞ —Å–µ –Ω–∞–ø–∏—à–µ —Ñ—É–Ω—Ü–∫–∏—è lookup_table_f(x_val), –∫–æ—è—Ç–æ –ø—Ä–µ—Å–º—è—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–æ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ ùëì(ùë•)=sin(sqrt(x))
    –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [0,2ùúã], –∫–∞—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ 2 –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –º–∞—Å–∏–≤–∞ - f_nodes,
        —Å—ä–¥—ä—Ä–∂–∞—â —Ä–∞–≤–Ω–æ–æ—Ç–¥–∞–ª–µ—á–µ–Ω–∏ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ ‚Ñé=0.01 —Ç–æ—á–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [0,2ùúã] –∏ f_values - –º–∞—Å–∏–≤ –æ—Ç —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ —Ñ—É–Ω—Ü–∫–∏—è—Ç–∞ f,
            –ø—Ä–µ—Å–º–µ—Ç–Ω–∞—Ç–∏ –≤ —Ç–æ—á–∫–∏—Ç–µ f_nodes.
–§—É–Ω–∫—Ü–∏—è—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–µ—Å–º—è—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–æ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ ùëì(ùë•)
    –∫–∞—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ –∫—É–±–∏—á–Ω–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –≤ –Ω–∞–π-–±–ª–∏–∑–∫–∏—Ç–µ –¥–æ x_val –≤—ä–∑–ª–∏ –æ—Ç —Å–ø–∏—Å—ä–∫–∞ f_nodes. –ó–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ x_val,
        –∫–æ–∏—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏—Ç–µ [0,0.01] –∏ [2ùúã‚àí0.01,2ùúã] –¥–∞ —Å–µ –ø–æ—Å—Ç—Ä–æ—è–≤–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏–æ–Ω–µ–Ω –ø–æ–ª–∏–Ω–æ–º –æ—Ç ùúã2.
–í —Å–ª—É—á–∞–π, —á–µ –ø–æ–¥–∞–¥–µ–Ω–∏—è—Ç –∞—Ä–≥—É–º–µ–Ω—Ç x_val –ª–µ–∂–∏ –∏–∑–≤—ä–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [0,2ùúã], –¥–∞ —Å–µ –∏–∑–≤–µ–∂–¥–∞ –ø–æ–¥—Ö–æ–¥—è—â–æ —Å—ä–æ–±—â–µ–Ω–∏–µ.
'''

import numpy as np

from util.lagrange_poly import lagrange_poly

def look_up_table_f(x_val, function=lambda x: np.sin(np.sqrt(x)), interval_begin=0, interval_end=2*np.pi, h=0.01):
    if x_val < interval_begin or x_val > interval_end:
        return None
    
    temp = interval_begin
    f_nodes = []
    while temp < interval_end:
        f_nodes.append(temp)
        temp += h

    offset = (interval_end - f_nodes[-1])/2

    f_nodes = [x + offset for x in f_nodes]
    f_values = function(f_nodes)

    closest_x = min(f_nodes, key = lambda curr_x: abs(curr_x - x_val))

    return lagrange_poly(np.array(f_nodes), np.array(f_values), closest_x)

print(look_up_table_f(0.02))